{"version":3,"file":"fabricAsyncLoader.js","sourceRoot":"../src/","sources":["fabricAsyncLoader.ts"],"names":[],"mappings":";;AAAA,2BAA6B;AAC7B,0CAA4C;AAE5C,SAAS,gBAAgB,CAAC,OAAiC;IACzD,IAAM,oBAAoB,GAA8B;QACtD,gBAAgB,EAAE,QAAI,OAAO,CAAC,SAAS,IAAI,cAAc,QAAG;QAC5D,eAAe,EAAE,OAAO,CAAC,QAAQ;QACjC,cAAc,EAAE,OAAO,CAAC,OAAO;KAChC,CAAC;IAEF,OAAO,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC;SACrC,GAAG,CAAC,UAAC,GAAW;QACf,IAAI,oBAAoB,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;YAC3C,OAAO,QAAM,GAAG,UAAK,oBAAoB,CAAC,GAAG,CAAC,QAAK,CAAC;SACrD;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC,CAAC;SACD,MAAM,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC;SACxB,IAAI,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,CAAC,OAAO,GAAG,UAAU,OAAe;IACxC,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,UAAU,gBAAwB,EAAE,gBAAwB;IACjF,IAAM,OAAO,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IACnD,IAAM,aAAa,GAAG,OAAK,gBAAkB,CAAC;IAC9C,IAAM,iBAAiB,GAAG,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC5E,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IACzE,IAAM,OAAO,GAAG,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAElE,OAAO;QACL,wCAAwC;QACxC,gBAAc,UAAU,kBAAe;QACvC,0CAAwC,gBAAgB,CACtD,OAAO,CACR,SAAI,OAAO,sCAAiC,UAAU,aAAU;QACjE,wCAAwC;QACxC,KAAK;KACN,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACf,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport * as loaderUtils from 'loader-utils';\n\nfunction getMagicComments(options: loaderUtils.OptionObject): string {\n  const magicCommentsOptions: { [key: string]: string } = {\n    webpackChunkName: `\"${options.chunkName || 'fabric.async'}\"`,\n    webpackPrefetch: options.prefetch,\n    webpackPreload: options.preload,\n  };\n\n  return Object.keys(magicCommentsOptions)\n    .map((key: string) => {\n      if (magicCommentsOptions[key] !== undefined) {\n        return `/* ${key}: ${magicCommentsOptions[key]} */`;\n      } else {\n        return null;\n      }\n    })\n    .filter((s: string) => s)\n    .join(' ');\n}\n\n/**\n * Fabric async loader will automatically replace the Fabric components specified in the \"include\" option of the\n * loader with the below code.\n * The code uses the `react-loadable` control to facilitate auto code-splitting at the Fabric component level.\n *\n * NOTE: This code is heavily inspired by https://github.com/baflo/react-loadable-loader.\n *\n * @param content the source code to be transformed\n */\nmodule.exports = function (content: string): string {\n  return content;\n};\n\n/**\n * Pitch is first phase of the loading process; it gives access to the module name.\n * This method actually injects the code.\n * @see https://github.com/webpack/docs/wiki/loaders\n *\n * @param remainingRequest the remaining requested module\n * @param previousRequest the remaining requested module\n */\nmodule.exports.pitch = function (remainingRequest: string, precedingRequest: string): string {\n  const options = loaderUtils.getOptions(this) || {};\n  const moduleRequest = `!!${remainingRequest}`;\n  const normalizedRequest = loaderUtils.stringifyRequest(this, moduleRequest);\n  const moduleName = path.basename(normalizedRequest).replace(/\\..*$/, '');\n  const request = loaderUtils.stringifyRequest(this, moduleRequest);\n\n  return [\n    \"import Loadable from 'react-loadable';\",\n    `export var ${moduleName} = Loadable({`,\n    `  loader: function() { return import(${getMagicComments(\n      options,\n    )} ${request}).then(function(m) { return m.${moduleName}; }); },`,\n    `  loading: function() { return null; }`,\n    `});`,\n  ].join('\\n');\n};\n"]}