"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var loaderUtils = require("loader-utils");
function getMagicComments(options) {
    var magicCommentsOptions = {
        webpackChunkName: "\"" + (options.chunkName || 'fabric.async') + "\"",
        webpackPrefetch: options.prefetch,
        webpackPreload: options.preload,
    };
    return Object.keys(magicCommentsOptions)
        .map(function (key) {
        if (magicCommentsOptions[key] !== undefined) {
            return "/* " + key + ": " + magicCommentsOptions[key] + " */";
        }
        else {
            return null;
        }
    })
        .filter(function (s) { return s; })
        .join(' ');
}
/**
 * Fabric async loader will automatically replace the Fabric components specified in the "include" option of the
 * loader with the below code.
 * The code uses the `react-loadable` control to facilitate auto code-splitting at the Fabric component level.
 *
 * NOTE: This code is heavily inspired by https://github.com/baflo/react-loadable-loader.
 *
 * @param content the source code to be transformed
 */
module.exports = function (content) {
    return content;
};
/**
 * Pitch is first phase of the loading process; it gives access to the module name.
 * This method actually injects the code.
 * @see https://github.com/webpack/docs/wiki/loaders
 *
 * @param remainingRequest the remaining requested module
 * @param previousRequest the remaining requested module
 */
module.exports.pitch = function (remainingRequest, precedingRequest) {
    var options = loaderUtils.getOptions(this) || {};
    var moduleRequest = "!!" + remainingRequest;
    var normalizedRequest = loaderUtils.stringifyRequest(this, moduleRequest);
    var moduleName = path.basename(normalizedRequest).replace(/\..*$/, '');
    var request = loaderUtils.stringifyRequest(this, moduleRequest);
    return [
        "import Loadable from 'react-loadable';",
        "export var " + moduleName + " = Loadable({",
        "  loader: function() { return import(" + getMagicComments(options) + " " + request + ").then(function(m) { return m." + moduleName + "; }); },",
        "  loading: function() { return null; }",
        "});",
    ].join('\n');
};
//# sourceMappingURL=fabricAsyncLoader.js.map